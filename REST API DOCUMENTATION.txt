REST API DOCUMENTATION

1. AUTHENTICATION ENDPOINTS
=========================

Register
--------
Description: Register a new user
POST /auth/register
Request:
{
    "email": "string",
    "password": "string"
}
Response: 201 Created
{
    "message": "Registration success"
}
Error Responses:
- 400: Invalid password
- 409: Email already exists

Login
-----
Description: Login with email and password
POST /auth/login
Request:
{
    "email": "string",
    "password": "string"
}
Response: 200 OK
{
    "token": "jwt_token"
}
Error Response:
- 401: Invalid credentials

Logout
------
Description: Invalidate current JWT token
POST /auth/logout
Auth: Required
Response: 200 OK
{
    "message": "Successfully logged out"
}
Error Response:
- 401: Invalid or missing token

Invalidate Account
----------------
Description: Invalidate user account
POST /auth/invalidate
Auth: Required
Response: 200 OK
{
    "message": "Account invalidated successfully"
}
Error Responses:
- 401: Authorization required
- 403: Invalid credentials

2. REVIEW ENDPOINTS
==================

Get Reviews
----------
Description: Get all reviews for a specific movie
GET /reviews/:title
Parameters:
- title: Movie title (URL encoded)
Auth: Not Required
Response: 200 OK
{
    "reviews": [
        {
            "user_id": "number",
            "email": "string",
            "movie_id": "number",
            "rating": "string",
            "info": "string",
            "created": "timestamp",
            "updated": "timestamp"
        }
    ]
}
Error Response:
- 404: Movie not found

Get All Reviews
-------------
Description: Get all reviews from all users
GET /reviews/all
Auth: Not Required
Response: 200 OK
{
    "reviews": [
        {
            "user_id": "number",
            "email": "string",
            "movie_id": "number",
            "rating": "string",
            "info": "string",
            "created": "timestamp",
            "updated": "timestamp"
        }
    ]
}

Add Review
---------
Description: Create a new review for a movie
POST /reviews/new
Auth: Required
Request:
{
    "title": "string",          // Movie title
    "finnkino_event": "string", // Optional Finnkino event ID
    "rating": "string",         // Rating 1-5
    "info": "string"           // Optional review text
}
Response: 201 Created
{
    "message": "Review added successfully",
    "review": {
        "user_id": "number",
        "movie_id": "number",
        "rating": "string",
        "info": "string",
        "created": "timestamp",
        "updated": "timestamp"
    }
}
Error Responses:
- 400: Invalid review data
- 409: Review already exists

Update Review
-----------
Description: Update an existing review
PUT /reviews/:title
Parameters:
- title: Movie title (URL encoded)
Auth: Required
Request:
{
    "rating": "string",    // Rating 1-5
    "info": "string"      // Optional review text
}
Response: 200 OK
{
    "message": "Review updated successfully",
    "review": {
        "user_id": "number",
        "movie_id": "number",
        "rating": "string",
        "info": "string",
        "created": "timestamp",
        "updated": "timestamp"
    }
}
Error Responses:
- 404: Review not found
- 403: Not authorized to update this review

Delete Review
-----------
Description: Delete a review
DELETE /reviews/:title
Parameters:
- title: Movie title (URL encoded)
Auth: Required
Response: 200 OK
{
    "message": "Review deleted successfully"
}
Error Responses:
- 404: Review not found
- 403: Not authorized to delete this review

3. GROUP ENDPOINTS
=================

List Groups
----------
Description: Get all available groups
GET /groups
Auth: Not Required
Response: 200 OK
{
    "groups": [
        {
            "id": "number",
            "title": "string",
            "created": "timestamp"
        }
    ]
}

Create Group
-----------
Description: Create a new movie group
POST /groups
Auth: Required
Request:
{
    "title": "string"    // Group name, must be unique
}
Response: 201 Created
{
    "group": {
        "id": "number",
        "title": "string",
        "owner_id": "number",
        "created": "timestamp"
    }
}
Error Responses:
- 400: Invalid group data
- 409: Group name already exists

Get Group Details
---------------
Description: Get detailed information about a specific group
GET /groups/:groupId
Parameters:
- groupId: Group identifier (number)
Auth: Required
Response: 200 OK
{
    "group": {
        "id": "number",
        "title": "string",
        "owner_id": "number",
        "email": "string",
        "created": "timestamp"
    }
}
Error Responses:
- 404: Group not found
- 401: Not authorized to view group details

Delete Group
-----------
Description: Delete a group
DELETE /groups/:groupId
Parameters:
- groupId: Group identifier (number)
Auth: Required
Response: 200 OK
{
    "message": "Group deleted"
}
Error Responses:
- 404: Group not found or unauthorized

Add Member
---------
Description: Add a new member to a group
POST /groups/:groupId/members
Parameters:
- groupId: Group identifier (number)
Auth: Required
Request:
{
    "userId": "number",     // ID of user to add
    "isAdmin": "boolean"   // Optional admin status
}
Response: 201 Created
{
    "message": "Member added successfully",
    "member": {
        "group_id": "number",
        "user_id": "number",
        "is_admin": "boolean"
    }
}
Error Responses:
- 403: Not authorized to add members
- 404: User or group not found

Remove Member
-----------
Description: Remove a member from a group
DELETE /groups/:groupId/members/:userId
Parameters:
- groupId: Group identifier (number)
- userId: User identifier (number)
Auth: Required
Response: 200 OK
{
    "message": "Member removed successfully"
}
Error Responses:
- 404: Member not found in group
- 401: Not authorized to remove member

List Join Requests
----------------
Description: Get all pending join requests for a group
GET /groups/:groupId/join-requests
Parameters:
- groupId: Group identifier (number)
Auth: Required
Response: 200 OK
{
    "requests": [
        {
            "id": "number",
            "user_id": "number",
            "group_id": "number",
            "request_status": "string",
            "created": "timestamp"
        }
    ]
}
Error Response:
- 403: Not authorized to view requests

Create Join Request
-----------------
Description: Request to join a group
POST /groups/:groupId/join-requests
Parameters:
- groupId: Group identifier (number)
Auth: Required
Response: 201 Created
{
    "request": {
        "id": "number",
        "user_id": "number",
        "group_id": "number",
        "request_status": "string",
        "created": "timestamp"
    }
}
Error Responses:
- 403: Already a member or request pending

Update Join Request
-----------------
Description: Update status of a join request
PUT /groups/join-requests/:requestId
Parameters:
- requestId: Request identifier (number)
Auth: Required
Request:
{
    "status": "string"    // "approved" or "declined"
}
Response: 200 OK
{
    "request": {
        "id": "number",
        "user_id": "number",
        "group_id": "number",
        "request_status": "string"
    }
}
Error Responses:
- 403: Not authorized to update request
- 404: Request not found

List Group Movies
---------------
Description: Get all movies in a group's watchlist
GET /groups/:groupId/movies
Parameters:
- groupId: Group identifier (number)
Auth: Required
Response: 200 OK
{
    "movies": [
        {
            "group_id": "number",
            "movie_id": "number",
            "title": "string",
            "finnkino_event": "string",
            "added_date": "timestamp"
        }
    ]
}
Error Responses:
- 403: Not authorized to view group movies
- 404: Group not found

Add Group Movie
-------------
Description: Add a movie to a group's watchlist
POST /groups/:groupId/movies
Parameters:
- groupId: Group identifier (number)
Auth: Required
Request:
{
    "title": "string",          // Movie title
    "finnkino_event": "string"  // Optional Finnkino event ID
}
Response: 201 Created
{
    "message": "Movie added successfully",
    "movie": {
        "group_id": "number",
        "movie_id": "number",
        "title": "string"
    }
}
Error Responses:
- 403: Not authorized to add movies
- 404: Group not found
- 409: Movie already in group

Delete Group Movie
----------------
Description: Remove a movie from a group's watchlist
DELETE /groups/:groupId/movies/:title
Parameters:
- groupId: Group identifier (number)
- title: Movie title (URL encoded)
Auth: Required
Response: 200 OK
{
    "message": "Movie removed from group successfully"
}
Error Responses:
- 403: Not authorized
- 404: Group or movie not found

4. FAVOURITE MOVIES ENDPOINTS
===========================

List Favourites
-------------
Description: Get user's favourite movies
GET /favourites
Auth: Required
Response: 200 OK
{
    "favourites": [
        {
            "user_id": "number",
            "movie_id": "number",
            "title": "string",
            "finnkino_event": "string"
        }
    ]
}

Add Favourite
-----------
Description: Add a movie to favourites
POST /favourites/new
Auth: Required
Request:
{
    "title": "string",          // Movie title
    "finnkino_event": "string"  // Optional Finnkino event ID
}
Response: 201 Created
{
    "message": "Movie added to favourites successfully",
    "favourite": {
        "user_id": "number",
        "movie_id": "number",
        "title": "string",
        "finnkino_event": "string"
    }
}
Error Response:
- 400: Movie title is required

Remove Favourite
--------------
Description: Remove a movie from favourites
DELETE /favourites/:title
Parameters:
- title: Movie title (URL encoded)
Auth: Required
Response: 200 OK
{
    "message": "Movie removed from favourites successfully"
}
Error Response:
- 404: Movie or favourite not found